import os

def parseClipsToJson(content):
    '''
    Parse the text of a clippings text file and convert to a dict structure.

    @param content: String of full text in the My Clippings.txt file from a kindle
    @return clips: Dictionary of book titles to lists of highlights
    '''
    clips = {}
    curr = []
    lines = content.split('\n')
    for i, line in enumerate(lines):
        curr.append(line)
        if line.startswith('===') and line.endswith('==='):

            # Parse data
            book = curr[0].strip()
            if not book.isascii():
                book = book[1:]
            data = curr[1][2:]
            text = curr[3]
            values = [val.strip() for val in data.split(' | ')]
            if len(values) == 3:
                page, location, date = values
            elif len(values) == 2:
                page, date = values
                location = None

            # Build entry
            clipping = {
                "page": page,
                "location": location,
                "date": date,
                "text": text
            }

            # Add to dict
            if book not in clips:
                clips[book] = [clipping]
            else:
                clips[book].append(clipping)

            # Reset for next book
            curr = []

    return clips


def buildText(clips):
    '''
    Convert a list of highlights to markdown text.
    If you want to change the resulting formatting, then change this function.

    @param clips: A list of clips (generated by the parseClipsToJson() func above)
    @return newcontent: A string of text that can form a markdown file.
    '''
    clips = sorted(clips, key=lambda c: c['location'])
    entries = []
    for clip in clips:
        page = clip['page'].replace('Highlight on ', '')

        entry = f"**{page} ({clip['location']})**\n\n"
        entry += f"**Date: {clip['date']}**\n"
        entry += f">{clip['text']}\n"
        entry += '---\n'
        entries.append(entry)

    newcontent = '\n'.join(entries)
    return newcontent


def notify(title, text):
    os.system("""
              osascript -e 'display notification "{}" with title "{}"'
              """.format(text, title))
